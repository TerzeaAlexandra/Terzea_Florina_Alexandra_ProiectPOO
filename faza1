#include <iostream>
#include<string>
using namespace std;


//domeniul este transport feroviar

class Pasager {
private:
	string nume;
	int varsta;
	const int id;
	static int nrPasageri;
	int* bilete;

public:

	Pasager() : id(0) {
		this->nume = "NoName";
		this->varsta = 0;
		this->bilete = NULL;
		nrPasageri++;
	}

	Pasager(string nume, int varsta) : id(3) {
		this->nume = nume;
		this->varsta = varsta;
		this->bilete = NULL;
		nrPasageri++;

	}

	Pasager(string nume, int varsta, int* bilete, int size) : id(5) {
		this->nume = nume;
		this->varsta = varsta;
		this->bilete = new int[size];
		for (int i = 0; i < size; i++) {
			this->bilete[i] = bilete[i];
		}
		nrPasageri++;
	}

	Pasager(const Pasager& pasager) : id(pasager.id) {
		this->nume = pasager.nume;
		this->varsta = pasager.varsta;
		if (pasager.bilete != NULL) {
			this->bilete = new int[2];
			for (int i = 0; i < 2; i++) {
				this->bilete[i] = pasager.bilete[i];
			}
		}
		else {
			this->bilete = NULL;
		}
		nrPasageri++;
	}

	~Pasager() {
		delete[] bilete;
		nrPasageri--;
	}

	string getNume() const {
		return this->nume;
	}

	void setNume(string& nume) {
		this->nume = nume;
	}

	int getVarsta() const {
		return this->varsta;
	}

	void setVarsta(int varsta) {
		this->varsta = varsta;
	}

	int getId() const {
		return this->id;
	}

	static int getNrPasageri() {
		return nrPasageri;
	}


	void afisare() const {
		cout << " Pasagerul cu numele " << nume << " are varsta de " << varsta << " ani." << endl;

	}

	Pasager& operator=(const Pasager& pasager) {
		if (this != &pasager) {
			this->nume = pasager.nume;
			this->varsta = pasager.varsta;
			delete[] this->bilete;
			if (pasager.bilete != NULL) {
				this->bilete = new int[2];
				for (int i = 0; i < 2; i++) {
					this->bilete[i] = pasager.bilete[i];
				}
			}
			else {
				this->bilete = NULL;
			}
		}
		return *this;
	}

	bool operator==(const Pasager& pasager) {
		return this->nume == pasager.nume && this->varsta == pasager.varsta;
	}

	Pasager operator+(const Pasager& pasager) {
		Pasager aux;
		aux.nume = this->nume;
		aux.varsta += pasager.varsta;
		return aux;
	}

	int operator[](int index) {
		if (index >= 0 && index < 2) {
			return this->bilete[index];
		}
		else {
			throw 404;
		}
	}

	
};
int Pasager::nrPasageri = 0;

void citestePasageri(Pasager* pasageri, int n) {
	for (int i = 0; i < n; i++) {
		string nume;
		int varsta;
		cout << "Numele pasagerului este: " << i + 1 << " ";;
		getline(cin, nume);
		cout << "Varsta pasagerului este " << i + 1 << " :";
		cin >> varsta;
		pasageri[i] = Pasager(nume, varsta);
	}
}

void afiseazaPasageri(const Pasager* pasageri, int n) {
	cout << "Pasageri: " << endl;
	for (int i = 0; i < n; i++) {
		cout << "Pasager " << i + 1 << " ";
		pasageri[i].afisare();

	}
}



class Bilet {
private:
	string destinatie;
	float pret;
	const int id;
	static string companie;
	bool* utilizat;

public:
	Bilet() :id(0) {
		this->destinatie = "numeDestinatie";
		this->pret = 0.0;
		this->utilizat = NULL;
	}

	Bilet(string destinatie, float pret) : id(1) {
		this->destinatie = destinatie;
		this->pret = pret;
		this->utilizat = NULL;

	}

	Bilet(string destinatie, float pret, bool* utilizat, int size) : id(2) {
		this->destinatie = destinatie;
		this->pret = pret;
		this->utilizat = new bool[size];
		for (int i = 0; i < size; i++) {
			this->utilizat[i] = utilizat[i];
		}
	}

	Bilet(const Bilet& bilet) : id(bilet.id) {
		this->destinatie = bilet.destinatie;
		this->pret = bilet.pret;
		if (bilet.utilizat != NULL) {
			this->utilizat = new bool[3];
			for (int i = 0; i < 3; i++) {
				this->utilizat[i] = bilet.utilizat[i];
			}
		}
		else {
			this->utilizat = NULL;
		}
	}

	string getDestinatie() const {
		return this->destinatie;
	}

	void setDestinatie(string& destinatie) {
		this->destinatie = destinatie;
	}

	float getPret() const {
		return pret;
	}

	void setPret(float pret) {
		if (pret >= 0) {
			this->pret = pret;
		}
	}

	int getId() const {
		return id;
	}

	static string getCompanie() {
		return companie;
	}

	~Bilet() {
		delete[] utilizat;
	}


	void afisareDestinatie() const {
		cout << "Urmatorul tren are destinatia " << destinatie << ", pretul unui bilet fiind de " << pret << " lei." << endl;

	}

	Bilet& operator=(const Bilet& bilet) {
		if (this != &bilet) {
			this->destinatie = bilet.destinatie;
			this->pret = bilet.pret;
			delete[]this->utilizat;
			if (bilet.utilizat != NULL) {
				this->utilizat = new bool[3];
				for (int i = 0; i < 3; i++) {
					this->utilizat[i] = bilet.utilizat[i];
				}
			}
			else {
				this->utilizat = NULL;
			}
		}
		return *this;
	}

	bool operator!=(const Bilet& bilet) {
		return this->pret != bilet.pret;
	}

	Bilet operator-(const Bilet& bilet) {
		Bilet aux(*this);
		aux.pret -= bilet.pret;
		return aux;
	}

	Bilet operator*(float factor) {
		Bilet aux(*this);
		aux.pret *= factor;
		return aux;
	}
};

string Bilet::companie = "";

void citesteBilete(Bilet* bilete, int n) {
	for (int i = 0; i < n; i++) {
		string destinatie;
		float pret;
		cout << "Destinatia este: " << i + 1 << " ";
		getline(cin, destinatie);
		cout << "Pretul biletului este :" << i + 1 << " ";
		cin >> pret;
		bilete[i] = Bilet(destinatie, pret);
	}
}

void afiseazaBilete(const Bilet* bilete, int n) {
	cout << "Bilete: " << endl;
	for (int i = 0; i < n; i++) {
		cout << "Bilet " << i + 1 << " ";
		bilete[i].afisareDestinatie();
	}
}


class Tren {
private:
	string nume;
	int nrVagoane;
	static string companie;
	const int idTren;
	int* capacitate;

public:
	Tren() : idTren(1) {
		this->nume = "FaraNume";
		this->nrVagoane = 0;
		this->capacitate = NULL;
	}

	Tren(string nume, int nrVagoane) : idTren(2) {
		this->nume = nume;
		this->nrVagoane = nrVagoane;
		this->capacitate = NULL;


	}

	Tren(string nume, int nrVagoane, int* capacitate, int size) : idTren(3) {
		this->nume = nume;
		this->nrVagoane = nrVagoane;
		this->capacitate = new int[size];
		for (int i = 0; i < size; i++) {
			this->capacitate[i] = capacitate[i];

		}
	}

	Tren(const Tren& tren) : idTren(tren.idTren) {
		this->nume = tren.nume;
		this->nrVagoane = tren.nrVagoane;
		if (tren.capacitate != NULL) {
			this->capacitate = new int[3];
			for (int i = 0; i < 3; i++) {
				this->capacitate[i] = tren.capacitate[i];
			}
		}
		else {
			this->capacitate = NULL;
		}
	}

	~Tren() {
		delete[] capacitate;
	}

	string getNume() const {
		return nume;
	}

	void setNume(const string& nume) {
		this->nume = nume;
	}

	int getNrVagoane() const {
		return nrVagoane;
	}

	void setNrVagoane(int nrVagoane) {
		this->nrVagoane = nrVagoane;
	}

	int getIdTren() {
		return idTren;
	}

	static string getCompanie() {
		return companie;
	}

	void afisare() const {
		cout << "Trenul cu numele " << this->nume << " ,are un numar de " << this->nrVagoane << " vagoane. " << endl;

	}

	Tren& operator=(const Tren& tren) {
		if (this != &tren) {
			this->nume = tren.nume;
			this->nrVagoane = tren.nrVagoane;
			delete[]this->capacitate;
			if (tren.capacitate != NULL)
			{
				this->capacitate = new int[3];
				for (int i = 0; i < 3; i++) {
					this->capacitate[i] = tren.capacitate[i];
				}
			}
			else {
				this->capacitate = NULL;
			}
		}
		return *this;
	}

	Tren& operator++() {
		this->nrVagoane++;
		return *this;
	}

	Tren operator/(int factor) {
		Tren aux(*this);
		aux.nrVagoane /= factor;
		return aux;
	}

	Tren operator--(int) {
		Tren aux(*this);
		this->nrVagoane--;
		return aux;
	}

	bool operator==(const Tren& tren) {
		return this->nume == tren.nume && this->nrVagoane == tren.nrVagoane;
	}
};
string Tren::companie = "";

void citesteTrenuri(Tren* trenuri, int n) {
	for (int i = 0; i < n; i++) {
		string nume;
		int nrVagoane;
		cout << "Numele trenului " << i + 1 << " ";
		getline(cin, nume);
		cout << "Numarul de vagoane ale trenului: " << i + 1 << " ";
		cin >> nrVagoane;
		trenuri[i] = Tren(nume, nrVagoane);
	}
}

void afiseazaTrenuri(const Tren* trenuri, int n) {
	cout << "Trenuri: " << endl;
	for (int i = 0; i < n; i++) {
		cout << "Tren " << i + 1 << " ";
		trenuri[i].afisare();
	}
}

class Calatorie {
private:
	Tren tren;
	string destinatie;
	int nrPasageri;
public:
	Calatorie() {
		this->tren = Tren();
		this->destinatie = "Fara Destinatie";
		this->nrPasageri = 0;
	}

	Calatorie(const Tren& tren, const string& destinatie, int nrPasageri) {
		this->tren = tren;
		this->destinatie = destinatie;
		this->nrPasageri = nrPasageri;
	}

	Tren getTren() const {
		return tren;
	}
	void setTren(const Tren& tren) {
		this->tren = tren;
	}

	string getDestinatie() const {
		return destinatie;
	}

	void setDestinatie(const string& destinatie) {
		this->destinatie = destinatie;
	}

	int getNrPasageri() const {
		return nrPasageri;
	}

	void setNrPasageri(int nrPasageri) {
		this->nrPasageri = nrPasageri;
	}
	
	void afisareDetalii() const {
		cout << "Calatorie cu destinatia " << destinatie << ", are un numar de" << nrPasageri << " pasageri" << endl;
		tren.afisare();
	}

	Calatorie& operator=(const Calatorie& calatorie) {
		if (this != &calatorie) {
			this->tren = calatorie.tren;
			this->destinatie = calatorie.destinatie;
			this->nrPasageri = calatorie.nrPasageri;
		}
		return *this;
	}

	bool operator==(const Calatorie& calatorie) {
		return this->tren == calatorie.tren && this->destinatie == calatorie.destinatie && this->nrPasageri == calatorie.nrPasageri;
	}

	Calatorie operator+(int nrPasageri) {
		Calatorie aux(*this);
		aux.nrPasageri += nrPasageri;
		return aux;
	}

};




void detaliiPasager(const Pasager& pasager) {
	cout << "Detalii pasager: " << endl;
	cout << "Nume: " << pasager.getNume() << endl;
	cout << "varsta: " << pasager.getVarsta() << endl;
}

void detaliiBilet(const Bilet& bilet) {
	cout << "detalii bilet: " << endl;
	cout << "Destinatie: " << bilet.getDestinatie() << endl;
	cout << "pret: " << bilet.getPret() << endl;
}

void main()
{
	const int n = 3;
	Pasager pasageri[n];
	Bilet bilete[n];
	Tren trenuri[n];
	cout << "Introduceti informatiile pentru pasageri: " << endl;
	citestePasageri(pasageri, n);
	cout << "Introduceti informatiile pentru bilete: " << endl;
	citesteBilete(bilete, n);
	cout << "Introduceti informatiile pentru trenuri: " << endl;
	citesteTrenuri(trenuri, n);
	cout << "Afisare pasageri: " << endl;
	afiseazaPasageri(pasageri, n);
	cout << "Afisare bilete: " << endl;
	afiseazaBilete(bilete, n);
	cout << "Afisare trenuri: " << endl;
	afiseazaTrenuri(trenuri, n);

	const int m = 2;
	Tren matrice[m][n];
	cout << "Introduceti informatiile " << endl;
	for (int i = 0; i < m; i++) {
		cout << "Linia " << i + 1 << " " << endl;
		citesteTrenuri(matrice[i], n);
	}
	cout << "Afisare matrice: " << endl;
	for (int i = 0; i < m; i++) {
		cout << "Linia " << i + 1 << " " << endl;
		afiseazaTrenuri(matrice[i], n);
	}
	int bilete1[2] = { 1,2 };
	Pasager pasager1;
	Pasager pasager2("Popescu Ion", 35);
	Pasager pasager3("Teodorescu Vasile", 27, bilete1, 2);

	pasager1.afisare();
	cout << endl;
	pasager2.afisare();
	cout << endl;
	pasager3.afisare();
	cout << endl;

	bool utilizat1[3] = { true,false,true };
	Bilet bilet1;
	Bilet bilet2("Bucuresti", 25.5);
	Bilet bilet3("Craiova", 26, utilizat1, 3);

	bilet1.afisareDestinatie();
	cout << endl;
	bilet2.afisareDestinatie();
	cout << endl;
	bilet3.afisareDestinatie();
	cout << endl;


	int capacitate1[3] = { 90,140,190 };
	Tren tren1;
	Tren tren2("IR", 4);
	Tren tren3("R", 5, capacitate1, 3);

	tren1.afisare();
	cout << endl;
	tren2.afisare();
	cout << endl;
	tren3.afisare();
	cout << endl;

	detaliiPasager(pasager2);

	Pasager pasager4;
	pasager4 = pasager3;

	if (pasager2 == pasager3) {
		cout << "Pasagerii sunt identici! " << endl;
	}

	Pasager pasager5 = pasager2 + pasager3;

	Tren tren4 = ++tren3;
	cout << "Numarul de vagoane al trenului incrementat este: " << tren4.getNrVagoane() << endl;

	Tren tren5 = tren2 / 2;
	cout << "Numarul de vagoane al trenului5 este: " << tren5.getNrVagoane() << endl;

	Tren tren6 = tren3--;
	cout << "Numarul de vagoane al trenului decrementat este: " << tren6.getNrVagoane() << endl;


	detaliiBilet(bilet2);
	int bilet = pasager3[1];
	cout << "Biletul de pe pozitia 1 este: " << bilet << endl;

	Bilet bilet4 = bilet2 - bilet3;
	cout << "Diferenta de pret dintre cele 2 bilete este: " << bilet4.getPret() << endl;

	Bilet bilet5 = bilet3 * 2.5;
	cout << "Pretul noului bilet este: " << bilet5.getPret() << endl;


	Calatorie calatorie1(tren1, "Galati", 20);
	Calatorie calatorie2(tren1, "Galati", 20);

	if (calatorie1 == calatorie2) {
		cout << "Cele două călătorii sunt identice!" << endl;
	}

	Calatorie calatorie3 = calatorie1 + 5;
	cout << "Numărul de pasageri al călătoriei 3: " << calatorie3.getNrPasageri() << endl;

}
